apply plugin: 'io.quarkus'

def static randomPort() {
    try {
        ServerSocket server = new ServerSocket()
        server.setReuseAddress(true)
        server.bind(new InetSocketAddress(0))
        int port = server.getLocalPort()
        server.close()
        return port
    } catch (IOException e) {
        throw new IOException('Failed to find random free port', e)
    }
}

dependencies {
    implementation enforcedPlatform("io.quarkus:quarkus-bom:$quarkusVersion")
    implementation enforcedPlatform("org.trellisldp.ext:trellis-ext-bom:$trellisVersion")

    // Quarkus Application
    implementation 'io.quarkus:quarkus-agroal'
    implementation 'io.quarkus:quarkus-flyway'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-jsonb'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-security'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging'
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging-kafka'

    // Trellis Application
    implementation "org.trellisldp:trellis-app"
    implementation "org.trellisldp:trellis-cdi"

    // Trellis Auth
    implementation "org.trellisldp:trellis-auth-oauth"
    implementation "org.trellisldp:trellis-webac"

    // Trellis components
    implementation "org.trellisldp:trellis-api"
    implementation "org.trellisldp:trellis-audit"
    implementation "org.trellisldp:trellis-cache"
    implementation "org.trellisldp:trellis-constraint-rules"
    implementation "org.trellisldp:trellis-event-jsonb"
    implementation "org.trellisldp:trellis-file"
    implementation "org.trellisldp:trellis-http"
    implementation "org.trellisldp:trellis-io-jena"
    implementation "org.trellisldp:trellis-namespaces"
    implementation "org.trellisldp:trellis-rdfa"
    implementation "org.trellisldp:trellis-reactive"
    implementation "org.trellisldp:trellis-vocabulary"
    implementation "org.trellisldp.ext:trellis-db"

    implementation "com.github.spullara.mustache.java:compiler:$mustacheVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
    implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    implementation "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    implementation("org.apache.commons:commons-rdf-jena:$commonsRdfVersion") {
        exclude group: "org.apache.commons", module: "commons-rdf-simple"
        exclude group: 'org.apache.jena', module: 'jena-osgi'
        exclude group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.xerces'
    }
    implementation("org.apache.jena:jena-arq:$jenaVersion")
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.yaml:snakeyaml:$snakeyamlVersion"


    runtime "jakarta.activation:jakarta.activation-api:$activationApiVersion"
    runtime "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"

    testImplementation "com.opentable.components:otj-pg-embedded:$otjPgVersion"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.jboss.resteasy:resteasy-client"
    testImplementation "org.apache.commons:commons-text:$commonsTextVersion"
    testImplementation "org.trellisldp:trellis-test"
}

test {
    if (!project.hasProperty("externalPgsql")) {
        def port = randomPort()
        systemProperty 'testing.pgsql.port', port
        systemProperty 'quarkus.datasource.username', 'postgres'
        systemProperty 'quarkus.datasource.password', 'postgres'
        systemProperty 'quarkus.datasource.url', "jdbc:postgresql://localhost:$port/postgres"
    } else {
        systemProperty 'testing.external.pgsql', 'true'
    }

    systemProperty 'com.arjuna.ats.arjuna.objectstore.objectStoreDir', "$buildDir/data/ObjectStore"
    systemProperty 'trellis.file.memento-path', "$buildDir/data/mementos"
    systemProperty 'trellis.file.binary-path', "$buildDir/data/binaries"
}


buildNative.enabled = false
quarkusDev {
    doFirst {
        project.buildscript.repositories.gradlePluginPortal()
        project.buildscript.dependencies.add('classpath', "io.quarkus:io.quarkus.gradle.plugin:$quarkusVersion")
    }
}

