plugins {
    id 'com.github.ben-manes.versions' version "0.39.0"
    id 'com.github.hierynomus.license' version "0.15.0"
    id 'net.researchgate.release' version "2.8.1"
    id 'org.owasp.dependencycheck' version "6.5.1"
}

ext {
    // Platform
    quarkusVersion = "2.6.0.Final"

    // Dependencies
    commonsRdfVersion = "0.5.0"
    jdbiVersion = "3.10.1"
    mustacheVersion = "0.9.10"
    trellisVersion = "0.19.0"

    // Testing
    commonsTextVersion = "1.9"
    jenaVersion = "4.3.2"
    otjPgVersion = "0.13.4"

    // Tools
    checkstyleVersion = "8.26"
    jacocoVersion = "0.8.5"
}

allprojects { subproj ->
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    ext {
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org'
        docURL = 'https://www.trellisldp.org/docs/trellis/current/apidocs/'
        license = 'Apache 2'
    }

    group = 'org.trellisldp.ext'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        testImplementation platform("io.quarkus:quarkus-bom:$quarkusVersion")
        //testImplementation Platform("org.junit:junit-bom")
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntime("org.junit.jupiter:junit-jupiter-engine")
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            /* Note: for maintenance branches, set this value to the appropriate branch name. */
            requireBranch = 'main'
            signTag = true
        }
    }

    configurations.all {
        // Titanium requires JakartaEE 9+
        exclude group: 'com.apicatalog', module: 'titanium-json-ld'

        resolutionStrategy {
            // Jena's JSON-LD 1.1 support brings in JSON-P 2.x
            force "org.glassfish:jakarta.json:1.1.6"
        }
    }
}

subprojects { subproj ->

    sourceCompatibility = 11
    targetCompatibility = 11

    jar {
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }

    artifacts {
        archives sourceJar
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    packaging = 'jar'
                    name = 'Trellis Linked Data Server: MicroProfile-based deployable applications'
                    description = 'Deployable Trellis applications using MicroProfile and JavaEE'
                    url = "https://www.trellisldp.org"
                    inceptionYear = '2017'

                    organization {
                        name = project.vendor
                        url = project.homepage
                    }

                    developers {
                        developer {
                            id = 'acoburn'
                            name = 'Aaron Coburn'
                            email = 'acoburn (at) apache (dot) org'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/trellis-ldp/trellis-microprofile.git'
                        developerConnection = 'scm:git:git@github.com/trellis-ldp/trellis-microprofile.git'
                        url = 'https://github.com/trellis-ldp/trellis-microprofile'
                        tag = 'HEAD'
                    }

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0'
                            comments = 'Copyright (c) 2017-2020 Aaron Coburn and individual contributors'
                        }
                    }
                }
                pom.withXml {
                    // eliminate test-scoped dependencies
                    asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                }

                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }
            }
        }
        repositories {
            maven {
                def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("SONATYPE_USERNAME") ?: ""
                def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("SONATYPE_PASSWORD") ?: ""
                if (version.endsWith("SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    task install(dependsOn: [assemble, publishToMavenLocal])
    task upload(dependsOn: [assemble, publish])

    processResources {
        outputs.upToDateWhen { false }
        filesMatching(['**/features.xml', '**/banner.txt']) {
            expand project.properties
        }
    }

    signing {
        required {
            !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
                gradle.taskGraph.hasTask it
            }
        }
        sign publishing.publications
    }

    gradle.taskGraph.whenReady( { graph ->
        tasks.withType(AbstractArchiveTask).each { archive ->
            archive.doLast {
                ant.checksum file: archive.archivePath, algorithm: 'sha-256', format: 'MD5SUM', fileext: '.sha256'
            }
        }
    })

    javadoc {
        options.tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat "full"
            showStackTraces false
        }
    }

    afterReleaseBuild.dependsOn publish
    afterReleaseBuild.dependsOn assemble

    jacoco.toolVersion = jacocoVersion

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

configure(rootProject) {

    // Ignore alpha, beta, milestone and release candidates
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'cr', 'rc', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release Candidate")
                }
            }
        }
    }

    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }

    task getVersion {
        doLast {
            println project.version
        }
    }
}
